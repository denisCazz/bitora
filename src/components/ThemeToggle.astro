---
// Theme Toggle Component
// Provides light, dark, and system theme switching functionality
---

<div class="theme-toggle flex items-center gap-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1 transition-colors duration-300" role="radiogroup" aria-label="Seleziona tema">
  <button
    type="button"
    class="theme-btn p-2 rounded-md transition-all duration-200 hover:bg-gray-200 dark:hover:bg-gray-700 aria-pressed:bg-white aria-pressed:shadow-sm dark:aria-pressed:bg-gray-600"
    data-theme="light"
    aria-pressed="false"
    aria-label="Tema chiaro"
    title="Tema chiaro"
  >
    <svg class="w-4 h-4 text-gray-700 dark:text-gray-300" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
    </svg>
  </button>

  <button
    type="button"
    class="theme-btn p-2 rounded-md transition-all duration-200 hover:bg-gray-200 dark:hover:bg-gray-700 aria-pressed:bg-white aria-pressed:shadow-sm dark:aria-pressed:bg-gray-600"
    data-theme="dark"
    aria-pressed="false"
    aria-label="Tema scuro"
    title="Tema scuro"
  >
    <svg class="w-4 h-4 text-gray-700 dark:text-gray-300" fill="currentColor" viewBox="0 0 20 20">
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
  </button>

  <button
    type="button"
    class="theme-btn p-2 rounded-md transition-all duration-200 hover:bg-gray-200 dark:hover:bg-gray-700 aria-pressed:bg-white aria-pressed:shadow-sm dark:aria-pressed:bg-gray-600"
    data-theme="system"
    aria-pressed="false"
    aria-label="Tema automatico"
    title="Tema automatico"
  >
    <svg class="w-4 h-4 text-gray-700 dark:text-gray-300" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd" />
    </svg>
  </button>
</div>

<script>
  // @ts-nocheck
  // Theme management script
  class ThemeManager {
    constructor() {
      this.currentTheme = this.getStoredTheme() || 'system';
      this.init();
    }

    init() {
      this.applyTheme(this.currentTheme);
      this.updateUI();
      this.bindEvents();
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (this.currentTheme === 'system') {
          this.applyTheme('system');
        }
      });
    }

    bindEvents() {
      document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.currentTarget;
          const theme = target?.dataset?.theme;
          if (theme) {
            this.setTheme(theme);
          }
        });
      });
    }

    setTheme(theme) {
      this.currentTheme = theme;
      this.applyTheme(theme);
      this.updateUI();
      this.storeTheme(theme);
    }

    applyTheme(theme) {
      const root = document.documentElement;
      
      // Remove existing theme classes
      root.classList.remove('light', 'dark');
      
      if (theme === 'dark') {
        root.classList.add('dark');
      } else if (theme === 'light') {
        root.classList.add('light');
      } else if (theme === 'system') {
        // Use system preference
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          root.classList.add('dark');
        } else {
          root.classList.add('light');
        }
      }
    }

    updateUI() {
      document.querySelectorAll('.theme-btn').forEach(btn => {
        const isActive = btn.dataset?.theme === this.currentTheme;
        btn.setAttribute('aria-pressed', isActive.toString());
      });
    }

    getStoredTheme() {
      if (typeof localStorage !== 'undefined') {
        return localStorage.getItem('theme');
      }
      return null;
    }

    storeTheme(theme) {
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }
    }
  }

  // Initialize theme manager when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ThemeManager();
    });
  } else {
    new ThemeManager();
  }

  // Handle page navigation in SPAs/Astro view transitions
  document.addEventListener('astro:page-load', () => {
    new ThemeManager();
  });
</script>

<style>
  .theme-toggle {
    user-select: none;
  }
  
  .theme-btn[aria-pressed="true"] {
    background-color: white;
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  }
  
  .dark .theme-btn[aria-pressed="true"] {
    background-color: rgb(75 85 99);
  }
</style>
