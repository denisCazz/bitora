---
import { icons } from './Icons';

const navItems = [
  { name: 'Home', url: '/' },
  { 
    name: 'Servizi',
    url: '/services',
    dropdown: [
      { name: 'Ecosistema NFC', url: '/nfc-ecosystem' },
      { name: 'Web Design', url: '/services' },
      { name: 'Servizi Carmagnola', url: '/carmagnola' }
    ]
  },
  { 
    name: 'Azienda',
    url: '/chi-siamo',
    dropdown: [
      { name: 'Chi Siamo', url: '/chi-siamo' },
      { name: 'Lavori', url: '/lavori' },
      { name: 'Blog', url: '/blog' }
    ]
  },
  { name: 'Prezzi', url: '/prezzi' },
  { name: 'Contatti', url: '/contattaci' },
];

const currentPath = Astro.url.pathname;
---

<header class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800 sticky top-0 z-50 transition-colors duration-300">
  <div class="container mx-auto px-4 py-4 relative">
    <div class="flex justify-between items-center">
      <a
        href="/"
        class="text-2xl font-bold text-black dark:text-white hover:text-gray-800 dark:hover:text-gray-200 transition-colors duration-300 z-10"
      >
        <span class="tracking-tighter">bitora</span><span class="text-gray-500 dark:text-gray-400">.it</span>
      </a>      <nav class="hidden md:flex gap-6">
        {
          navItems.map(item => (
            item.dropdown ? (
              <div class="relative group">
                <button class={`py-2 px-3 hover:text-black dark:hover:text-white transition-all duration-300 relative flex items-center gap-1 ${currentPath === item.url || item.dropdown.some(d => d.url === currentPath) ? 'text-black dark:text-white font-medium' : 'text-gray-600 dark:text-gray-300'}`}>
                  {item.name}
                  <div class="w-4 h-4">
                    <Fragment set:html={icons.chevronDown} />
                  </div>
                </button>
                <div class="absolute top-full left-0 bg-white dark:bg-gray-900 shadow-lg rounded-lg border border-gray-100 dark:border-gray-800 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 min-w-48">
                  <div class="py-2">
                    {item.dropdown.map(dropItem => (
                      <a 
                        href={dropItem.url}
                        class={`block px-4 py-2 text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-800 ${currentPath === dropItem.url ? 'text-black dark:text-white font-medium bg-gray-50 dark:bg-gray-800' : 'text-gray-600 dark:text-gray-300'}`}
                      >
                        {dropItem.name}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.url}
                class={`py-2 px-3 hover:text-black dark:hover:text-white transition-all duration-300 relative after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-0 after:bg-black dark:after:bg-white hover:after:w-full after:transition-all after:duration-300 ${currentPath === item.url ? 'text-black dark:text-white font-medium after:w-full' : 'text-gray-600 dark:text-gray-300'}`}
              >
                {item.name}
              </a>
            )
          ))
        }
      </nav><div class="md:hidden">
        <button
          id="menu-toggle"
          class="text-black dark:text-white p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700 z-10 relative"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <div class="hamburger">
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
          </div>
        </button>
      </div>
    </div>    <!-- Mobile Menu Dropdown (New Compact Version) -->
    <div
      id="mobile-menu"
      class="absolute top-full left-0 right-0 bg-white dark:bg-gray-900 shadow-2xl z-50 transform -translate-y-full opacity-0 invisible transition-all duration-300 ease-in-out md:hidden border-t border-gray-100 dark:border-gray-800"
    >      <nav class="px-4 py-3 max-h-[80vh] overflow-y-auto">
        <ul class="space-y-1">
          {
            navItems.map(item => (
              item.dropdown ? (
                <li>
                  <div class="block py-2.5 px-3 text-sm font-medium text-gray-800 dark:text-gray-200 border-b border-gray-100 dark:border-gray-700">
                    {item.name}
                  </div>
                  <ul class="ml-4 mt-1 space-y-1">
                    {item.dropdown.map(dropItem => (
                      <li>
                        <a
                          href={dropItem.url}
                          class={`block py-2 px-3 text-sm rounded-md transition-all duration-200 ${
                            currentPath === dropItem.url
                              ? 'text-black dark:text-white font-semibold bg-gray-50 dark:bg-gray-800 border-l-2 border-blue-500'
                              : 'text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800'
                          }`}
                        >
                          {dropItem.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                </li>
              ) : (
                <li>
                  <a
                    href={item.url}
                    class={`block py-2.5 px-3 text-sm rounded-md transition-all duration-200 ${
                      currentPath === item.url
                        ? 'text-black dark:text-white font-semibold bg-gray-50 dark:bg-gray-800 border-l-3 border-black dark:border-white'
                        : 'text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800'
                    }`}
                  >
                    {item.name}
                  </a>
                </li>
              )
            ))
          }
        </ul>
        <div class="mt-3 pt-3 border-t border-gray-100 dark:border-gray-800">
          <a
            href="/contattaci"
            class="block w-full py-2 px-3 bg-black dark:bg-white text-white dark:text-black text-center text-sm font-semibold rounded-md hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
          >
            Iniziamo il Progetto
          </a>
        </div>
      </nav>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const body = document.body;

    function openMenu() {
      mobileMenu?.classList.remove('-translate-y-full', 'opacity-0', 'invisible');
      mobileMenu?.classList.add('translate-y-0', 'opacity-100', 'visible');
      menuToggle?.setAttribute('aria-expanded', 'true');
      menuToggle?.querySelector('.hamburger')?.classList.add('open');
      body.style.overflow = 'hidden'; // Prevent body scroll
    }

    function closeMenu() {
      mobileMenu?.classList.add('-translate-y-full', 'opacity-0', 'invisible');
      mobileMenu?.classList.remove('translate-y-0', 'opacity-100', 'visible');
      menuToggle?.setAttribute('aria-expanded', 'false');
      menuToggle?.querySelector('.hamburger')?.classList.remove('open');
      body.style.overflow = ''; // Restore body scroll
    }

    menuToggle?.addEventListener('click', () => {
      const isOpen = menuToggle?.getAttribute('aria-expanded') === 'true';
      if (isOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    // Close menu when clicking on nav links
    const navLinks = mobileMenu?.querySelectorAll('a');
    navLinks?.forEach(link => {
      link.addEventListener('click', closeMenu);
    });    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      const isClickInsideMenu = mobileMenu?.contains(target);
      const isClickOnToggle = menuToggle?.contains(target);
      
      if (!isClickInsideMenu && !isClickOnToggle && !mobileMenu?.classList.contains('invisible')) {
        closeMenu();
      }
    });

    // Close menu on Escape key
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && !mobileMenu?.classList.contains('invisible')) {
        closeMenu();
      }
    });
  });
</script>

<style>
  .hamburger {
    display: flex;
    flex-direction: column;
    width: 24px;
    height: 18px;
    justify-content: space-between;
    cursor: pointer;
  }

  .hamburger-line {
    width: 100%;
    height: 2px;
    background-color: currentColor;
    transition: all 0.3s ease;
    transform-origin: center;
  }

  .hamburger.open .hamburger-line:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }

  .hamburger.open .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .hamburger.open .hamburger-line:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }
</style>
